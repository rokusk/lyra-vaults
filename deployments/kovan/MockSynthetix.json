{
  "address": "0x21859659ffDfb57eA82E38D804a031D02046A95e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "sourceCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "destinationCurrencyKey",
          "type": "bytes32"
        }
      ],
      "name": "exchange",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "exchangeForAddress",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "sourceCurrencyKey",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "sourceAmount",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "destinationCurrencyKey",
          "type": "bytes32"
        }
      ],
      "name": "exchangeOnBehalf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_key",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "setMockedKeyToAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_outToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_outAmount",
          "type": "uint256"
        }
      ],
      "name": "setMockedTradeAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x438681551c8c1fc2ffbc3bce83f49f79e595a3832c64bccbeda4bc36d5150737",
  "receipt": {
    "to": null,
    "from": "0x005e447ece1bd8Ecb114B9b8095276692445D466",
    "contractAddress": "0x21859659ffDfb57eA82E38D804a031D02046A95e",
    "transactionIndex": 6,
    "gasUsed": "272397",
    "logsBloom": "0x
    "blockHash": "0xd92a10b4d31d97aa8bdbbd65e4e36ad08f9fdee9d357bf93beb19ae82d201df0",
    "transactionHash": "0x438681551c8c1fc2ffbc3bce83f49f79e595a3832c64bccbeda4bc36d5150737",
    "logs": [],
    "blockNumber": 28678551,
    "cumulativeGasUsed": "941998",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "bda36917ba62abeac6bd6cf50082533a",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"exchange\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"exchangeForAddress\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"sourceCurrencyKey\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"sourceAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"destinationCurrencyKey\",\"type\":\"bytes32\"}],\"name\":\"exchangeOnBehalf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_key\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"setMockedKeyToAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_outToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_outAmount\",\"type\":\"uint256\"}],\"name\":\"setMockedTradeAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/MockSynthetix.sol\":\"MockSynthetix\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/interfaces/ISynthetix.sol\":{\"content\":\"//SPDX-License-Identifier: ISC\\npragma solidity >=0.7.6;\\n\\ninterface ISynthetix {\\n  function exchange(\\n    bytes32 sourceCurrencyKey,\\n    uint sourceAmount,\\n    bytes32 destinationCurrencyKey\\n  ) external returns (uint amountReceived);\\n\\n  function exchangeOnBehalf(\\n    address exchangeForAddress,\\n    bytes32 sourceCurrencyKey,\\n    uint sourceAmount,\\n    bytes32 destinationCurrencyKey\\n  ) external returns (uint amountReceived);\\n}\\n\",\"keccak256\":\"0xe84a3c7b54ba99ee0afde22495d5968a55631f1265cf54c6f531f0d12a6a070f\",\"license\":\"ISC\"},\"contracts/mocks/MockSynthetix.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\npragma solidity ^0.7.0;\\n\\nimport {ISynthetix} from \\\"../interfaces/ISynthetix.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ncontract MockSynthetix is ISynthetix {\\n  mapping(bytes32 => address) private addressMap;\\n\\n  mapping(address => uint) private mockedTradeAmount;\\n\\n  function setMockedKeyToAddress(bytes32 _key, address _address) external {\\n    addressMap[_key] = _address;\\n  }\\n\\n  function setMockedTradeAmount(address _outToken, uint _outAmount) external {\\n    mockedTradeAmount[_outToken] = _outAmount;\\n  }\\n\\n  function exchange(\\n    bytes32 sourceCurrencyKey,\\n    uint sourceAmount,\\n    bytes32 destinationCurrencyKey\\n  ) external override returns (uint amountReceived) {\\n    // pull source currency\\n    IERC20(addressMap[sourceCurrencyKey]).transferFrom(msg.sender, address(this), sourceAmount);\\n\\n    // pay destination currency\\n    address destinationCurrency = addressMap[destinationCurrencyKey];\\n    amountReceived = mockedTradeAmount[destinationCurrency];\\n    IERC20(destinationCurrency).transfer(msg.sender, amountReceived);\\n  }\\n\\n  function exchangeOnBehalf(\\n    address exchangeForAddress,\\n    bytes32 sourceCurrencyKey,\\n    uint sourceAmount,\\n    bytes32 destinationCurrencyKey\\n  ) external override returns (uint amountReceived) {\\n    // pull source currency\\n    IERC20(addressMap[sourceCurrencyKey]).transferFrom(exchangeForAddress, address(this), sourceAmount);\\n\\n    // pay destination currency\\n    address destinationCurrency = addressMap[destinationCurrencyKey];\\n    amountReceived = mockedTradeAmount[destinationCurrency];\\n    IERC20(destinationCurrency).transfer(exchangeForAddress, amountReceived);\\n  }\\n}\\n\",\"keccak256\":\"0xb4d138a682773148be794d14c9c70c1f489108cc7ab85597db8161df8f3d6539\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506103f7806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806353b3119b14610051578063709fb92e1461007f578063c836fa0a146100ab578063ee52a2f3146100f5575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b03813516906020013561011e565b005b61007d6004803603604081101561009557600080fd5b50803590602001356001600160a01b031661013a565b6100e3600480360360808110156100c157600080fd5b506001600160a01b038135169060208101359060408101359060600135610168565b60408051918252519081900360200190f35b6100e36004803603606081101561010b57600080fd5b5080359060208101359060400135610298565b6001600160a01b03909116600090815260016020526040902055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000838152602081815260408083205481516323b872dd60e01b81526001600160a01b03898116600483015230602483015260448201889052925192909116926323b872dd9260648084019382900301818787803b1580156101c957600080fd5b505af11580156101dd573d6000803e3d6000fd5b505050506040513d60208110156101f357600080fd5b505050600081815260208181526040808320546001600160a01b039081168085526001845282852054835163a9059cbb60e01b8152928a16600484015260248301819052925192949093849363a9059cbb93604480820194918390030190829087803b15801561026257600080fd5b505af1158015610276573d6000803e3d6000fd5b505050506040513d602081101561028c57600080fd5b50919695505050505050565b6000838152602081815260408083205481516323b872dd60e01b81523360048201523060248201526044810187905291516001600160a01b03909116926323b872dd926064808201939182900301818787803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050506040513d602081101561032157600080fd5b505050600081815260208181526040808320546001600160a01b03168084526001835281842054825163a9059cbb60e01b815233600482015260248101829052925190949193849363a9059cbb93604480830194928390030190829087803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b505050506040513d60208110156103b657600080fd5b50919594505050505056fea2646970667358221220c9a5f0647ac81dc6a47b0856d6aa6089c0864e4bbe4a09a4361b88850da8497364736f6c63430007060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806353b3119b14610051578063709fb92e1461007f578063c836fa0a146100ab578063ee52a2f3146100f5575b600080fd5b61007d6004803603604081101561006757600080fd5b506001600160a01b03813516906020013561011e565b005b61007d6004803603604081101561009557600080fd5b50803590602001356001600160a01b031661013a565b6100e3600480360360808110156100c157600080fd5b506001600160a01b038135169060208101359060408101359060600135610168565b60408051918252519081900360200190f35b6100e36004803603606081101561010b57600080fd5b5080359060208101359060400135610298565b6001600160a01b03909116600090815260016020526040902055565b60009182526020829052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000838152602081815260408083205481516323b872dd60e01b81526001600160a01b03898116600483015230602483015260448201889052925192909116926323b872dd9260648084019382900301818787803b1580156101c957600080fd5b505af11580156101dd573d6000803e3d6000fd5b505050506040513d60208110156101f357600080fd5b505050600081815260208181526040808320546001600160a01b039081168085526001845282852054835163a9059cbb60e01b8152928a16600484015260248301819052925192949093849363a9059cbb93604480820194918390030190829087803b15801561026257600080fd5b505af1158015610276573d6000803e3d6000fd5b505050506040513d602081101561028c57600080fd5b50919695505050505050565b6000838152602081815260408083205481516323b872dd60e01b81523360048201523060248201526044810187905291516001600160a01b03909116926323b872dd926064808201939182900301818787803b1580156102f757600080fd5b505af115801561030b573d6000803e3d6000fd5b505050506040513d602081101561032157600080fd5b505050600081815260208181526040808320546001600160a01b03168084526001835281842054825163a9059cbb60e01b815233600482015260248101829052925190949193849363a9059cbb93604480830194928390030190829087803b15801561038c57600080fd5b505af11580156103a0573d6000803e3d6000fd5b505050506040513d60208110156103b657600080fd5b50919594505050505056fea2646970667358221220c9a5f0647ac81dc6a47b0856d6aa6089c0864e4bbe4a09a4361b88850da8497364736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4793,
        "contract": "contracts/mocks/MockSynthetix.sol:MockSynthetix",
        "label": "addressMap",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 4797,
        "contract": "contracts/mocks/MockSynthetix.sol:MockSynthetix",
        "label": "mockedTradeAmount",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}